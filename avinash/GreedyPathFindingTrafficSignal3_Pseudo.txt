Pseudo-code for Simulation and Greedy Algorithms (Ambulance Delay Focus)
1. Road Network Simulation Setup
1.1. Network Definition:

Create a graph G using networkx.
Define 4 "central intersection" nodes (e.g., 'C1', 'C2', 'C3', 'C4'). These nodes will have adaptive traffic signals.
Define 8 "entry/exit" nodes (e.g., 'E1' through 'E8').
Add all nodes to G.
Connect the 4 central intersections and the 8 entry/exit nodes as before. Assign random travel times (weights) to all edges.
Add: A global dictionary GLOBAL_TRAFFIC_SIGNALS to store TrafficSignal objects, keyed by their CENTRAL_NODE ID.

1.2. TrafficSignal Class (Enhanced for Directional Optimization):
Purpose: Represents an adaptive traffic signal that greedily optimizes for emergency vehicles (EVs) by minimizing their delay at the intersection.

Attributes:
env: SimPy environment.
graph: The road network graph (needed to understand node relationships).
node_id: The ID of the intersection this signal controls.
switch_time: The time (in minutes) it takes for the signal to change phases.
signal_resource: A SimPy Resource with capacity 1 to ensure exclusive control of the signal for an EV.
_current_active_route: tuple (from_node, to_node) or None. This represents the specific road segment (e.g., 'C1' to 'C2') that currently has a green light. This implicitly covers "all four directions" by allowing any valid (incoming, outgoing) pair.
Method: request_clear_path(self, ev_id, incoming_node, outgoing_node):

Log that EV {ev_id} at self.node_id is requesting a clear path from incoming_node to outgoing_node.
request = self.signal_resource.request() (Request exclusive control of the signal).
yield request (Wait until control of the signal is acquired).
Greedy Signal Optimization Algorithm (Embedded):
Determine the required_route = (incoming_node, outgoing_node).
Create a canonical representation for comparison (e.g., tuple(sorted(route)) for undirected graphs, so (A,B) is same as (B,A)).
Check if the _current_active_route (or its canonical equivalent) matches the required_route.
If not aligned:
Log signal adaptation details (e.g., from old route to new, including switch_time delay).
yield self.env.timeout(self.switch_time) (Simulate the time taken for the signal to switch).
Update self._current_active_route = required_route.
Else (aligned):
Log that the signal is already aligned, no delay incurred.
self.signal_resource.release(request) (Release control of the signal).

1.3. Emergency Vehicle (EV) Process (Updated for Directional Signal Interaction):
Class: EmergencyVehicle
Attributes:
env: SimPy environment.
graph: The road network graph.
start_node: The EV's origin.
destination_node: The EV's target.
ev_id: Unique identifier.
path: The path calculated by the greedy shortest path algorithm.
run() Method (SimPy Process):
Log EV spawning.
Call GREEDY_SHORTEST_PATH to calculate the topology-based shortest path.
If no path, terminate.
Iterate through the calculated path segment by segment:
segment_start_node = self.path[i]
segment_end_node = self.path[i + 1]
Simulate road travel time (yield env.timeout(travel_time)).
Log arrival at segment_end_node.
If segment_end_node is a CENTRAL_NODE (an intersection) AND it's not the final destination:
This means the EV has arrived at the intersection and needs to proceed through it.
Identify incoming_node_for_signal = segment_start_node.
Identify outgoing_node_for_signal = self.path[i + 2] (the next node after the intersection in the path).
Get the signal_controller for segment_end_node.
yield env.process(signal_controller.request_clear_path(self.ev_id, incoming_node_for_signal, outgoing_node_for_signal)) (This call handles the potential signal delay based on its greedy optimization).
Log EV arrival at its final destination_node.

1.4. Emergency Vehicle Source and Main Simulation Loop: (Remains largely the same)
Initialization of random seed, SimPy.Environment().
Crucially, when initializing TrafficSignal objects: Pass the road_network_graph to their constructor.
Start source_emergency_vehicles process.
Run the simulation env.run(until=SIM_DURATION).
Log simulation start and end.

2. Greedy Algorithm for Shortest Path (Dijkstra's)
Function: GREEDY_SHORTEST_PATH(Graph G, StartNode S, DestinationNode D)

Inputs: G, S, D.
Outputs: path, total_time.

Logic: (Remains unchanged from previous version)
This algorithm finds the shortest path based only on the static travel times (edge weights). The dynamic delays introduced by traffic signals are handled during the simulation traversal by the EmergencyVehicle process interacting with the TrafficSignal objects.